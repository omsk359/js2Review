Часть проекта по автоматизации действий ВКонтакте (Meteor.js, MongoDB, React, Redux, Material-UI).
Разработана система управления задачами (конструирование, приостановка, удаление). Одна задача может управлять множеством аккаунтов. Возможен параллельный запуск множества задач.

TaskManager - класс менеджера задач, один экземпляр для всего приложения(синглтон). При создании восстанавливает (десериализует) задачи из соответствующего состояния (результат сериализации) из базы данных.
Создание задачи какого-либо типа (например, Регистрация аккаунтов, Рассылка сообщений и т.д.) с набором параметров. Создается для текущего пользователя, чтобы пользователь мог управлять только своими задачами.
Запуск, останов, удаление, приостановка, продолжение выполнения.
Методы вызываются на стороне сервера, ID текущего пользователя (ownerId) подставляется верный.
Если при создании экземпляра TaskManager в базе были запущенные задачи, то они запускаются автоматически. Таким образом, приложение восстанавливает состояние и продолжает выполнение при перезапуске сервера (например, из-за ошибок или при обновлении кода).

ResumableTask - базовый класс всех задач. Реализует методы: создание новой задачи с добавлением в БД, управление состоянием (Запуск, Приостановка, Останов и др.), сериализация/десериализация, сохранение текущего состояния задачи в БД (в стиле React - setState), а также некоторые вспомогательные методы. Каждая задача имеет собственный логгер, чтобы информативные/отладочные сообщения, а также сообщения об ошибках можно было разделить для задач/подзадач. Журнал выполнения задачи сохраняется в файл, который пользователь может просмотреть позже или в режиме реального времени через WebSocket.
ResumableTask - это абстрактный класс, т.е. предпологается его использование только путем наследования переопределяя и добавляя методы.

RegAccsTaskSingle - вспомогательный класс задачи для последовательной регистрация аккаунтов ВК.
RegAccsTask - основной класс задачи регистрации.

В тех задачах, в которых используется параллелизм, т.е. одновременное выполнение подзадач, например, на разных аккаунтах, описание задачи разбивается на 2 класса: один для основного функционала подзадачи (для определенного аккаунта, прокси, списка аккаунтов и т.п.), второй - используется для управления подзадачами (инициализация, подготовка параметров для подзадач, создание/запуск/приостановка/синхронизация подзадач).
Регистрация аккаунтов также выполняется параллельно. Классы, соответственно: RegAccsTaskSingle (подзадача) и RegAccsTask (мульти-задача). Кол-во подзадач регулируется параметром poolSize.

Регистрация аккаунтов происходит посредством указания номера телефона, приема СМС-кода и  его подтверждения на сайте ВК.
Для аренды номеров мобильных телефонов для приема СМС используется 4 сервиса: SimSms, SmsArea, SmsLike, SmsVk. Все эти сервисы предоставляют схожий по функционалу API, но различия имеются.
Использование нескольких сервисов ускоряет работу поскольку на каждом из них не всегда есть доступные для аренды номера.
ISmsProvider - абстрактный класс определяющий общий интерфейс для указанных выше сервисов: аренда номера, подтверждение/отклонение номера, прием смс, запрос кол-ва доступных номеров, баланса и т.д.
При регистрации аккаунтов набор используемых сервисов аренды номеров задается как параметр при создании задачи, а также требуется указать API-ключи от выбранных сервисов.
Интерфейс создания задачи RegAccsTask описывается в файле RegAccs.jsx
Среди параметров этой задачи также есть: общее кол-во создаваемых аккаунтов, кол-во одновременных потоков регистраций, пароль на новых аккаунтах, списки имен/фамилий.


В коде почти отсутствуют комментарии, а также используется русский язык в сообщениях. Проект разрабатывался для русских заказчиков, смена разработчика не планировалась изначально, я занимаюсь его поддержкой, поэтому комментировал только неочевидные для самого себя моменты.
